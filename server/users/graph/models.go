// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package users

import (
	"fmt"
	"io"
	"strconv"
)

type ExternalAccounts struct {
	UserID       string   `json:"userID"`
	Account      Accounts `json:"account"`
	AccessToken  string   `json:"accessToken"`
	RefreshToken string   `json:"refreshToken"`
}

func (ExternalAccounts) IsEntity() {}

type LinkAccount struct {
	ID string `json:"id"`
}

type NewUser struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

type User struct {
	ID             string              `json:"id"`
	Name           string              `json:"name"`
	Email          string              `json:"email"`
	LinkedAccounts []*ExternalAccounts `json:"linkedAccounts"`
	IsOnline       bool                `json:"isOnline"`
}

func (User) IsEntity() {}

type Accounts string

const (
	AccountsApple   Accounts = "APPLE"
	AccountsSpotify Accounts = "SPOTIFY"
)

var AllAccounts = []Accounts{
	AccountsApple,
	AccountsSpotify,
}

func (e Accounts) IsValid() bool {
	switch e {
	case AccountsApple, AccountsSpotify:
		return true
	}
	return false
}

func (e Accounts) String() string {
	return string(e)
}

func (e *Accounts) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Accounts(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Accounts", str)
	}
	return nil
}

func (e Accounts) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
